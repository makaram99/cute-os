C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TRAFFIC
OBJECT MODULE PLACED IN .\Objects\traffic.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\traffic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\traffic.lst) TABS(2) OBJECT(.\Objects\traffic.obj)

line level    source

   1          /***************************************************************************
   2           * @file    traffic.c
   3           * @author  Mahmoud Karam (ma.karam272@gmail.com)
   4           * @brief   This is a traffic Light project (Chapter 8 - Embedded C by Professor j. Pont).
   5           * @details A basic version of the traffic-light sequencer requires no inputs
   6           *          from the environment and will perform well by executing a sequence
   7           *          of pre-determined manoeuvres.
   8           *          It is a classic example of a Multi-State (Timed) system.
   9           *          
  10           * @version 1.0.0
  11           * @date    2022-03-22
  12           * @copyright Copyright (c) 2022
  13           ***************************************************************************/
  14          #include <reg52.h>
  15          #include "STD_TYPES.h"
  16          #include "Main.h"
  17          #include "Port.h"
  18          #include "traffic.h"
  19          #include "traffic_cfg.h"
  20          
  21          /*--------------------------------------------------------------------*/
  22          /*                          PRIVATE DATA                              */
  23          /*--------------------------------------------------------------------*/
  24          static TRAFFIC_SEQUENCE_t   colorSequence       = RED;  /*!< Initial colorSequence */
  25          static u16                  timeInState = 0;    /*!< Time counter */
  26          
  27          
  28          /*--------------------------------------------------------------------*/
  29          /*                    PRIVATE FUNCTIONS PROTOTYPES                    */
  30          /*--------------------------------------------------------------------*/
  31          /***************************************************************************
  32           * @brief  Update the traffic light system to the next state.
  33           * @return ERROR_t: 
  34           *          - \ref ERROR_NO in case of success, 
  35           *          - \ref ERROR_YES in case of failure.
  36           *          - \ref ERROR_TIMEOUT in case of timeout.
  37           *          Those errors are members of the global enumeration \ref ERROR_t.
  38           ***************************************************************************/
  39          static ERROR_t TRAFFIC_Update(void);
  40          
  41          /**********************************************************************
  42           * @brief   Set the color of the traffic light to RED.
  43           * @note    This function will be called by the function TRAFFIC_Update().
  44           * @return  ERROR state: 
  45           *          - \ref ERROR_NO in case of success, 
  46           *          - \ref ERROR_YES in case of failure.
  47           *          - \ref ERROR_TIMEOUT in case of timeout.
  48           *          Those errors are members of the global enumeration \ref ERROR_t.
  49           **********************************************************************/
  50          static ERROR_t TRAFFIC_RedSequence(void);
  51          
  52          /**********************************************************************
  53           * @brief   Set the color of the traffic light to RED_AMBER.
  54           * @note    This function will be called by the function TRAFFIC_Update().
C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 2   

  55           * @return  ERROR state: 
  56           *          - \ref ERROR_NO in case of success, 
  57           *          - \ref ERROR_YES in case of failure.
  58           *          - \ref ERROR_TIMEOUT in case of timeout.
  59           *          Those errors are members of the global enumeration \ref ERROR_t.
  60           **********************************************************************/
  61          static ERROR_t TRAFFIC_RedAmberSequence(void);
  62          
  63          /**********************************************************************
  64           * @brief   Set the color of the traffic light to GREEN.
  65           * @note    This function will be called by the function TRAFFIC_Update().
  66           * @return  ERROR state: 
  67           *          - \ref ERROR_NO in case of success, 
  68           *          - \ref ERROR_YES in case of failure.
  69           *          - \ref ERROR_TIMEOUT in case of timeout.
  70           *          Those errors are members of the global enumeration \ref ERROR_t.
  71           **********************************************************************/
  72          static ERROR_t TRAFFIC_GreenSequence(void);
  73          
  74          /**********************************************************************
  75           * @brief   Set the color of the traffic light to AMBER.
  76           * @note    This function will be called by the function TRAFFIC_Update().
  77           * @return  ERROR state: 
  78           *          - \ref ERROR_NO in case of success, 
  79           *          - \ref ERROR_YES in case of failure.
  80           *          - \ref ERROR_TIMEOUT in case of timeout.
  81           *          Those errors are members of the global enumeration \ref ERROR_t.
  82           **********************************************************************/
  83          static ERROR_t TRAFFIC_AmberSequence(void);
  84          
  85          /**********************************************************************
  86           * @brief   A generic function to set the color of the traffic light.
  87           * @param[in] redState: The state of the red lamp.
  88           * @param[in] amberState: The state of the amber lamp.
  89           * @param[in] greenState: The state of the green lamp.
  90           * @note The states of the lamps are either \ref HIGH or \ref LOW, member 
  91           *       of the global enum \ref STATE_t.
  92           * @param[in] duration: The duration of the current sequence in SECONDS.
  93           *            It can be either:
  94           *              - \ref TRAFFIC_DURATION_RED for the RED sequence.
  95           *              - \ref TRAFFIC_DURATION_RED_AMBER for the RED-AMBER sequence.
  96           *              - \ref TRAFFIC_DURATION_GREEN for the GREEN sequence.
  97           *              - \ref TRAFFIC_DURATION_AMBER for the AMBER sequence.
  98           *              Those durations are members of the global enumeration 
  99           *              \ref TRAFFIC_DURATION_t.
 100           * @note This function is called by the functions:
 101           *          - TRAFFIC_RedSequence()
 102           *          - TRAFFIC_RedAmberSequence()
 103           *          - TRAFFIC_GreenSequence()
 104           *          - TRAFFIC_AmberSequence()
 105           * @return ERROR state: 
 106           *          - \ref ERROR_NO in case of success, 
 107           *          - \ref ERROR_YES in case of failure.
 108           *          - \ref ERROR_TIMEOUT in case of timeout.
 109           *          Those errors are members of the global enumeration \ref ERROR_t.
 110           **********************************************************************/
 111          static ERROR_t TRAFFIC_GenericSequence(const STATE_t red, const STATE_t amber, const STATE_t green, TRAFFI
             -C_SEQUENCE_DURATION_t duration);
 112          
 113          
 114          
 115          
C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 3   

 116          
 117          
 118          
 119          /*--------------------------------------------------------------------*/
 120          /*                          PUBLIC FUNCTIONS                          */
 121          /*--------------------------------------------------------------------*/
 122          /***************************************************************************
 123           * @details This function does the following:
 124           *          - Initialize the traffic light system to \ref RED sequence.
 125           *          - Set the callback function of the OS delay to the function 
 126           *            \ref TRAFFIC_Update.
 127           ***************************************************************************/
 128          ERROR_t TRAFFIC_Init(void) {
 129   1          ERROR_t error = ERROR_NO;
 130   1      
 131   1          /*!< Reset the time counter */
 132   1          timeInState = 0;
 133   1      
 134   1          /*!< Initialize the colorSequence */
 135   1          colorSequence = RED;
 136   1          redPin   = HIGH;
 137   1          amberPin = LOW;
 138   1          greenPin = LOW;
 139   1      
 140   1          return error;
 141   1      }
 142          
 143          /***************************************************************************
 144           * @details This function does the following:
 145           *          * Turning off all the traffic lights.
 146           *          * Assign the callback function of the OS delay to NULL.
 147           ***************************************************************************/
 148          ERROR_t TRAFFIC_DeInit(void) {
 149   1          ERROR_t error = ERROR_NO;
 150   1      
 151   1          /*!< Setting traffic light to red */
 152   1          redPin   = LOW;
 153   1          amberPin = LOW;
 154   1          greenPin = LOW;
 155   1          
 156   1          /*!< Setting callback function to NULL */
 157   1          //cuteOS_(NULL);
 158   1      
 159   1          return error;
 160   1      }
 161          
 162          ERROR_t TRAFFIC_SetColor(const TRAFFIC_SEQUENCE_t Copy_color) {
 163   1          ERROR_t error = ERROR_NO;
 164   1          colorSequence = Copy_color;
 165   1      
 166   1          error |= TRAFFIC_Update();
 167   1      
 168   1          return error;
 169   1      }
 170          
 171          ERROR_t TRAFFIC_GetColor(TRAFFIC_SEQUENCE_t * const Copy_color) {
 172   1          ERROR_t error = ERROR_NO;
 173   1      
 174   1          *Copy_color = colorSequence;
 175   1      
 176   1          return error;
 177   1      }
C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 4   

 178          
 179          
 180          
 181          
 182          
 183          
 184          /*--------------------------------------------------------------------*/
 185          /*                 PRIVATE FUNCTIONS DEFINITIONS                      */
 186          /*--------------------------------------------------------------------*/
 187          /***************************************************************************
 188           * @details This function does the following:
 189           *          - Setting the traffic light color sequence according to the current 
 190           *            color sequence.
 191           *          - Update the OS delay for the current color sequence. 
 192           *          - Update the color sequence value to the next color sequence.
 193           *          So, when calling this function again, the color sequence will be changed.
 194           ***************************************************************************/
 195          ERROR_t TRAFFIC_Update(void) {
 196   1          ERROR_t error = ERROR_NO;
 197   1      
 198   1          /*!< Switch on the current color sequence */
 199   1          switch(colorSequence) {
 200   2              case RED:;
 201   2                  error |= TRAFFIC_RedSequence();
 202   2                  break;
 203   2              case RED_AMBER:;
 204   2                  error |= TRAFFIC_RedAmberSequence();
 205   2                  break;
 206   2              case GREEN:;
 207   2                  error |= TRAFFIC_GreenSequence();
 208   2                  break;
 209   2              case AMBER:;
 210   2                  error |= TRAFFIC_AmberSequence();
 211   2                  break;
 212   2              default:;
 213   2                  error |= ERROR_ILLEGAL_PARAM;   /*!< Illegal color sequence */
 214   2                  break;
 215   2          }
 216   1      
 217   1          return error;
 218   1      }
 219          
 220          static ERROR_t TRAFFIC_RedSequence(void) {
 221   1          ERROR_t error = ERROR_NO;
 222   1          
 223   1          error |= TRAFFIC_GenericSequence(HIGH, LOW, LOW, TRAFFIC_Configs.red_duration);
 224   1      
 225   1          return error;
 226   1      }
 227          
 228          static ERROR_t TRAFFIC_RedAmberSequence(void) {
 229   1          ERROR_t error = ERROR_NO;
 230   1          
 231   1          error |= TRAFFIC_GenericSequence(HIGH, HIGH, LOW, TRAFFIC_Configs.red_amber_duration);
 232   1      
 233   1          return error;
 234   1      }
 235          
 236          static ERROR_t TRAFFIC_GreenSequence(void) {
 237   1          ERROR_t error = ERROR_NO;
 238   1          
 239   1          error |= TRAFFIC_GenericSequence(LOW, LOW, HIGH, TRAFFIC_Configs.green_duration);
C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 5   

 240   1      
 241   1          return error;
 242   1      }
 243          
 244          static ERROR_t TRAFFIC_AmberSequence(void) {
 245   1          ERROR_t error = ERROR_NO;
 246   1          
 247   1          error |= TRAFFIC_GenericSequence(LOW, HIGH, LOW, TRAFFIC_Configs.amber_duration);
 248   1      
 249   1          return error;
 250   1      }
 251          
 252          /**********************************************************************
 253           * @details This function will set the color of the traffic light according to:
 254           *          - The passed states of each lamp.
 255           *          - Update the time counter.
 256           *          - Update the colorSequence according to the time counter
 257           *            for the current sequence has been completed, and reset the 
 258           *            time counter.
 259           **********************************************************************/
 260          static ERROR_t TRAFFIC_GenericSequence(const STATE_t redState, const STATE_t amberState, const STATE_t gre
             -enState, TRAFFIC_SEQUENCE_DURATION_t duration) {
 261   1          ERROR_t error = ERROR_NO;
 262   1          u8 tickTime = 0;
 263   1      
 264   1          /*!< Update the time counter */
 265   1          if(++timeInState >= duration) {
 266   2              timeInState = 0;            /*!< Reset the time counter */
 267   2              switch(colorSequence) {
 268   3                  case RED:
 269   3                      colorSequence = RED_AMBER;
 270   3                      redPin   = HIGH;
 271   3                      amberPin = HIGH;
 272   3                      greenPin = LOW;
 273   3                      break;
 274   3                  case RED_AMBER:
 275   3                      colorSequence = GREEN;
 276   3                      redPin   = LOW;
 277   3                      amberPin = LOW;
 278   3                      greenPin = HIGH;
 279   3                      break;
 280   3                  case GREEN:
 281   3                      colorSequence = AMBER;
 282   3                      redPin   = LOW;
 283   3                      amberPin = HIGH;
 284   3                      greenPin = LOW;
 285   3                      break;
 286   3                  case AMBER:
 287   3                      colorSequence = RED;
 288   3                      redPin   = HIGH;
 289   3                      amberPin = LOW;
 290   3                      greenPin = LOW;
 291   3                      break;
 292   3                  default:
 293   3                      error |= ERROR_ILLEGAL_PARAM;
 294   3                      break;
 295   3              }
 296   2          } else {
 297   2              redPin   = redState;
 298   2              amberPin = amberState;
 299   2              greenPin = greenState;
 300   2          }
C51 COMPILER V9.60.0.0   TRAFFIC                                                           03/26/2022 01:02:36 PAGE 6   

 301   1      
 302   1          return error;
 303   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
